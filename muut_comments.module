<?php

/**
 * @file
 * Code for the Muut comments module.
 */

include_once 'muut_comments.features.inc';

/**
 * Implements hook_menu().
 */
function muut_comments_menu() {
  $items = array();

  $items['muut-comments/auth/%'] = array(
    'title' => 'Muut authentication',
    'description' => 'Authentication callback for Muut comments.',
    'page callback' => 'muut_comments_auth_callback',
    'page arguments' => array(2),
    'access callback' => 'muut_comments_access_callback',
    'delivery callback' => 'drupal_json_output',
  );

  $items['admin/config/system/muut_comments'] = array(
    'title' => 'Muut comments',
    'description' => 'Configure Muut comments.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('muut_comments_config_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'muut_comments.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Custom ajax callback for muut comments.
 *
 * @return @array
 *   Returns data structure with sso data.
 */
function muut_comments_auth_callback($gid) {

  $apikey = variable_get('muut_comments_api_key', '');
  $secretkey = variable_get('muut_comments_api_secret', '');
  $timestamp = time();

  // Data for the anonymous user.
  $data = array('user' => array());

  if (user_is_logged_in() && user_access('post muut comments')) {
    $user = user_uid_optional_load();

    $displayname = $user->name;
    // Fallback to username.
    $displayname_field = variable_get('muut_comments_displayname_field', FALSE);
    if ($displayname_field) {
      $items = field_get_items('user', $user, $displayname_field);
      if ($items) {
        $item = array_shift($items);
        $displayname = $item['value'];
      }
    }

    // If current user has the right permission we set is_admin to TRUE.
    $is_admin = FALSE;
    if (muut_comments_administer_access($gid)) {
      $is_admin = TRUE;
    }

    $path = !empty($user->picture->uri) ? $user->picture->uri : variable_get('user_picture_default');
    $avatar_url = image_style_url('muut', $path);

    $data['user'] = array(
      "id" => $user->name,
      "displayname" => $displayname,
      "email" => $user->mail,
      "avatar" => $avatar_url,
      "is_admin" => $is_admin,
    );
  }

  $message = base64_encode(json_encode($data));
  $signature = sha1($secretkey . ' ' . $message . ' ' . $timestamp);

  $result = array(
    'api' => array(
      'key' => $apikey,
      'message' => $message,
      'signature' => $signature,
      'timestamp' => $timestamp,
    ),
  );

  return $result;

}

/**
 * Custom access callback.
 *
 * @return bool
 *   Always return TRUE
 */
function muut_comments_access_callback() {
  return TRUE;
}

/**
 * Administer access function.
 *
 * @param integer $gid
 *   Group id
 *
 *  @return boolean
 *    Returns TRUE if current user can administer comments.
 */
function muut_comments_administer_access($gid) {
  if (user_access('administer muut comments')) {
    return TRUE;
  }
  if (og_user_access_entity('administer muut comments', 'node', $gid)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function muut_comments_permission() {
  return array(
    'post muut comments' => array(
      'title' => t('Post Muut comments'),
    ),
    'administer muut comments' => array(
      'title' => t('Administer Muut comments'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 * @return array
 *    Array with Organic groups permissions provided by this module.
 */
function muut_comments_og_permission() {
  return array(
    'administer muut comments' => array(
      'title' => t('Administer Muut comments in group'),
      'description' => t("Allows user to delete comments in group.")
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function muut_comments_block_info() {
  return array(
    'comments' => array(
      'info' => t('Muut comments'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'comments_count' => array(
      'info' => t('Muut comment count'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Comment enables status.
 * @param  object $node
 * @return boolean
 */
function muut_comments_enabled($node) {
  $enable_fields = variable_get('muut_comments_enable_field', array());
  $enable_field  = empty($enable_fields[$node->type]) ? FALSE : $enable_fields[$node->type];
  $enable = FALSE;

  // If no field is defined as enabling/disabling comments don't show comments.
  if ($enable_field) {
    $items = field_get_items('node', $node, $enable_field);
    if ($items) {
      $item = array_shift($items);
      $enable = $item['value'];
    }
  }
  return $enable;
}

/**
 * Implements hook_block_view().
 */
function muut_comments_block_view($delta = '') {
  $block = array();

  if ($delta == 'comments' || $delta == 'comments_count') {

    // Todo: this should be exposed as an alter function.
    $ogc = og_context();
    $node = menu_get_object();
    if ($node && $node->nid && muut_comments_enabled($node)) {
      $comment_id = $ogc['gid'] . ':' . $node->nid;
    }
    else {
      return $block;
    }

    $community_name = variable_get('muut_comments_community_name', '');

    if ($delta == 'comments') {
      $js_settings = array(
        'data' => array(
          'muut_comments' => array(
            'login_url' => $GLOBALS['base_url'] . '/user/comment/login?destination=' . current_path(),
            'url' => 'https://muut.com/i/' . $community_name . '/comments/' . $comment_id,
            'show_online' => TRUE,
            'upload' => FALSE)),
        'type' => 'setting',
      );

      $block['content'] = array(
        '#markup' => '<div id="muut-comments"></div>',
        '#attached' => array(
          'js' => array(
            array('data' => '//cdn.muut.com/1/moot.da.min.js', 'type' => 'external'),
            drupal_get_path('module', 'muut_comments') . '/js/muut-comments.js',
            $js_settings,
          )
        )
      );

      if (variable_get('muut_comments_css', TRUE)) {
        $block['content']['#attached']['css'] =
          array(array('data' => '//cdn.muut.com/1/moot.css', 'type' => 'external'));
      }

    }
    else {
  
      $js_settings = array(
        'data' => array(
          'muut_comments_count' => array(
            'path' => $community_name . '/comments/' . $comment_id
          )),
        'type' => 'setting',
      );
  
      $block['content'] = array(
        '#markup' => '<div id="muut-comments-count"></div>',
         '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'muut_comments') . '/js/muut-comments-count.js',
            $js_settings
          )
        )
      );
    }
  }

  return $block;
}


/**
 * Implements hook_views_api().
 */
function muut_comments_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'muut_comments') . '/includes/views',
  );
}
